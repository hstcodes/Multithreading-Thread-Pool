/*The program calculates the size of the file, divides it into blocks of a specified size (block_size), 
and launches threads to process each block. The threads, upon receiving a signal, read their assigned block from the file, 
simulate network transmission with a sleep (replace this with actual networking code), and notify the main thread upon completion.

*/

#include <iostream>
#include <fstream>
#include <vector>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <algorithm>

const int block_size = 1024 * 1024; // 1 MB block size, adjust based on your requirements

std::mutex mtx;                   // Mutex for synchronizing access to shared data
std::condition_variable cv;       // Condition variable for signaling between threads
bool isReady = false;              // Shared flag indicating whether a block is ready to be sent

void sendBlock(const std::string& fileName, std::size_t start, std::size_t end) {
    std::unique_lock<std::mutex> lock(mtx);

    // Wait until the main thread signals that it's ready to send a block
    cv.wait(lock, [] { return isReady; });

    std::ifstream file(fileName, std::ios::binary);
    if (!file) {
        std::cerr << "Error opening file: " << fileName << std::endl;
        return;
    }

    file.seekg(start);
    std::vector<char> buffer(end - start);
    file.read(buffer.data(), buffer.size());

    // Simulate network transmission by sleeping
    std::this_thread::sleep_for(std::chrono::milliseconds(100));

    // TODO: Code to send buffer over the network goes here

    std::cout << "Transmitted block from " << start << " to " << end << std::endl;

    // Notify the main thread that this block has been sent
    isReady = false;
    cv.notify_one();
}

int main() {
    std::string fileName = "your_large_file.dat"; // Replace with your file name
    std::ifstream file(fileName, std::ios::binary | std::ios::ate);

    if (!file) {
        std::cerr << "Error opening file: " << fileName << std::endl;
        return 1;
    }

    std::size_t fileSize = file.tellg();
    std::size_t numBlocks = fileSize / block_size;

    // Launch threads to send each block concurrently
    std::vector<std::thread> threads;
    for (std::size_t i = 0; i < numBlocks; ++i) {
        std::size_t start = i * block_size;
        std::size_t end = (i + 1) * block_size;
        threads.emplace_back(sendBlock, fileName, start, end);
    }

    // Handle the last block if file size is not a multiple of block size
    if (fileSize % block_size != 0) {
        std::size_t start = numBlocks * block_size;
        std::size_t end = fileSize;
        threads.emplace_back(sendBlock, fileName, start, end);
    }

    // Notify threads to start sending blocks
    {
        std::lock_guard<std::mutex> lock(mtx);
        isReady = true;
    }
    cv.notify_all();

    // Wait for all threads to finish
    std::for_each(threads.begin(), threads.end(), std::mem_fn(&std::thread::join));

    return 0;
}
